trigger: none
pr:
  branches:
    include:
    - master
  paths:
    include:
    - deploy/terraform
variables:
  - group: azure-config-variables
  - group: azure-sap-hana-pipeline-secrets
  - template: templates/variables.yaml
stages:
- stage:
  pool:
    vmImage: "ubuntu-18.04"
  variables:
    ssh_timeout_s: 120
  jobs:
  - job: createDeployer
    steps:
      - template: templates/pre-deployment-steps.yml
      - template: templates/deployer/create-deployer-steps.yml
        parameters:
          deployer_rg_name: "ad-sap-deployer-$(Build.BuildId)"
  - job: createSAPLib
    dependsOn: createDeployer
    variables:
      deployer_rg: $[ dependencies.createDeployer.outputs['setDeployerRg.deployer_rg'] ]
    steps:
      - template: templates/pre-deployment-steps.yml
      - template: templates/collect-deployer-info.yml
        parameters:
          deployer_rg_name: "ad-sap-deployer-$(Build.BuildId)"
      - template: templates/add-agent-to-deployer-nsg.yml
        parameters:
          deployer_rg_name: "ad-sap-deployer-$(Build.BuildId)"
      - template: templates/saplib/create-saplib-steps.yml
      - script: |
          echo "=== Upload JSON to saplibrary ==="
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=$(ssh_timeout_s) "$(username)"@"$(publicIP)" '
          source /etc/profile.d/deploy_server.sh
          cd ~/sap-hana/deploy/terraform/run/sap_deployer/default
          bash deployer_tfstate_script.sh
          cd ~/sap-hana/deploy/terraform/run/sap_library/default
          bash saplibrary_tfstate_script.sh 
          '
        displayName: "Post saplibrary"
      - template: templates/remove-agent-from-deployer-nsg.yml
        parameters:
          deployer_rg_name: "ad-sap-deployer-$(Build.BuildId)"
  - job: createSAPSystem
    dependsOn: createSAPLib
    variables:
      deployer_rg: $[ dependencies.createDeployer.outputs['setDeployerRg.deployer_rg'] ]
    steps:
      - script: |
          mkdir -p ~/.ssh
          echo -e "$(hana-pipeline-rsa)" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          
          echo "=== Set agent IP ==="
          echo '##vso[task.setvariable variable=agent_ip]$(curl -s https://ipinfo.io/json | jq -r .ip)'
          
          echo "=== Fetch deployer info ==="
          az login --service-principal --user $(hana-pipeline-spn-id) --password $(hana-pipeline-spn-pw) --tenant $(landscape-tenant) --output none
          
          echo $(deployer_rg)
          echo "##vso[task.setvariable variable=username]$(az vm list --resource-group $(deployer_rg) | jq -r .[].osProfile.adminUsername)"
          vm_name=$(az vm list --resource-group $(deployer_rg) | jq -r .[].name)
          pip=$(az vm list-ip-addresses -g $(deployer_rg) -n $vm_name | jq -r .[].virtualMachine.network.publicIpAddresses | jq -r .[].ipAddress)
          echo "##vso[task.setvariable variable=publicIP]$pip"
        displayName: "Pre deployment"
        env:
          ARM_CLIENT_ID: $(hana-pipeline-spn-id)
          ARM_CLIENT_SECRET: $(hana-pipeline-spn-pw)
          ARM_TENANT_ID: $(landscape-tenant)
          ARM_SUBSCRIPTION_ID: $(landscape-subscription)
      - script: |
          az login --service-principal --user $(hana-pipeline-spn-id) --password $(hana-pipeline-spn-pw) --tenant $(landscape-tenant) --output none
          
          echo "=== Update NSG source address with agent IP ==="
          az network vnet subnet update -g $(deployer_rg) -n subnet-mgmt --vnet-name vnet-mgmt --network-security-group nsg-mgmt --output none
          prefix_list=$(az network nsg rule show  -g $(deployer_rg) --nsg-name nsg-mgmt -n ssh | jq -r '.sourceAddressPrefix, (.sourceAddressPrefixes | join(" ")) | select(.!=null)')
          az network nsg rule update -g $(deployer_rg) --nsg-name nsg-mgmt -n ssh --source-address-prefixes $(agent_ip) $prefix_list --output none
          
          echo "=== Deploy SAP library from deployer ==="
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=$(ssh_timeout_s) "$(username)"@"$(publicIP)" '
          source /etc/profile.d/deploy_server.sh
          cd ~/sap-hana
          git checkout $(sourceBranchName)
          cd ~/sap-hana/deploy/terraform/run
          cp -r sap_system sap_system_$(Build.BuildId)
          cd sap_system_$(Build.BuildId)
          sed 's/azure-sap-system-rg/ad-sap-system-$(Build.BuildId)/' sapsystem.json > PROD_HN1.json
          bash ~/sap-hana/deploy/terraform/run/sap_system/util/terraform.sh 
          '
        displayName: "Deploy new sapsystem"
        env:
          ARM_CLIENT_ID: $(hana-pipeline-spn-id)
          ARM_CLIENT_SECRET: $(hana-pipeline-spn-pw)
          ARM_TENANT_ID: $(landscape-tenant)
          ARM_SUBSCRIPTION_ID: $(landscape-subscription)
  - job: destroySAPSystem
    dependsOn: createSAPSystem
    condition: or(succeededOrFailed(), always())
    steps:
      - script: |
          sapsystem_rg="ad-sap-system-$(Build.BuildId)"
          az login --service-principal --user $(hana-pipeline-spn-id) --password $(hana-pipeline-spn-pw) --tenant $(landscape-tenant) --output none
          az group update --resource-group $sapsystem_rg --set tags.Delete=True
          az lock delete --name resource-group-level --resource-group $sapsystem_rg
          az group delete -n $sapsystem_rg --no-wait -y
          exit 0
        displayName: "Destroy new deployer"
        env:
          ARM_CLIENT_ID: $(hana-pipeline-spn-id)
          ARM_CLIENT_SECRET: $(hana-pipeline-spn-pw)
          ARM_TENANT_ID: $(landscape-tenant)
          ARM_SUBSCRIPTION_ID: $(landscape-subscription)
  - job: destroySAPLib
    dependsOn: destroySAPSystem
    condition: or(succeededOrFailed(), always())
    steps:
      - script: |
          saplib_rg="ad-sap-library-$(Build.BuildId)"
          az login --service-principal --user $(hana-pipeline-spn-id) --password $(hana-pipeline-spn-pw) --tenant $(landscape-tenant) --output none
          az group update --resource-group $saplib_rg --set tags.Delete=True
          az lock delete --name resource-group-level --resource-group $saplib_rg
          az group delete -n $saplib_rg --no-wait -y
          exit 0
        displayName: "Destroy new deployer"
        env:
          ARM_CLIENT_ID: $(hana-pipeline-spn-id)
          ARM_CLIENT_SECRET: $(hana-pipeline-spn-pw)
          ARM_TENANT_ID: $(landscape-tenant)
          ARM_SUBSCRIPTION_ID: $(landscape-subscription)
  - job: destroyDeployer
    dependsOn: destroySAPLib
    condition: or(succeededOrFailed(), always())
    steps:
      - script: |
          deployer_rg="ad-sap-deployer-$(Build.BuildId)"
          az login --service-principal --user $(hana-pipeline-spn-id) --password $(hana-pipeline-spn-pw) --tenant $(landscape-tenant) --output none
          az group update --resource-group $deployer_rg --set tags.Delete=True
          az lock delete --name resource-group-level --resource-group $deployer_rg
          az group delete -n $deployer_rg --no-wait -y
          exit 0
        displayName: "Destroy new deployer"
        env:
          ARM_CLIENT_ID: $(hana-pipeline-spn-id)
          ARM_CLIENT_SECRET: $(hana-pipeline-spn-pw)
          ARM_TENANT_ID: $(landscape-tenant)
          ARM_SUBSCRIPTION_ID: $(landscape-subscription)
